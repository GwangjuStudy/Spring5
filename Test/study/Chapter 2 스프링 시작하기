# 1. 스프링 시작하기

스프링을 이용한 자바 프로젝트를 쟁행하는 과정은 다음과 같다
 1) 메이븐 프로젝트 생성(또는 그레이들 프로젝트 생성)
 2) 이클립스에서 메이븐 프로젝트 임포트
 3) 스프링에 맞는 자바 코드와 설정 파일 작성
 4) 실행

# 1-1 프로젝트 폴더 생성

 - c:\spring5fs\sp5-chap02\src\main\java 폴더 생성
 - c:\spring5fs\sp5-chap02 (프로젝트 폴더)
 - c:\spring5fs\sp5-chap02\src\main\java (자바 소스 폴더)


# 1-2 메이븐 프로젝트 생성

 - 폴더 생성 이후 할 작업은 메이븐 프로젝트 설정 파일 작성이다.
 - c:\spring5fs\sp5-chap02 (프로젝트 폴더)에 pom.xml 파일 생성, 파일 내용은 다음과 같다.

```
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>sp5</groupId>
	<artifactId>sp5-chap02</artifactId> <!--8행 : 프로젝트 식별자 지정 여기서는 프로젝트 폴더와 동일한 이름인 sp5-chap02을 사용-->
	<version>0.0.1-SNAPSHOT</version>

	<dependencies>
		<dependency><!-- 12행~16행 : 프로젝트에서 5.0.2.RELEASE 버전의 spring-context 모듈을 사용한다고 설정-->
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.2.12.RELEASE</version>
		</dependency>
	
	
	</dependencies>

	<build>
		<plugins>
			<plugin><!--21행~29행 : 1.8버전을  기준으로 자바 소스를 멈파일 하고 결과 클래스를 생성한다. 자바 컴파일러가 소스 코드를 읽을 때 사용할 인코딩은 utf-8로 설정한다--> 
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.9.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
```

 - 이때, pom.xml 은 메이븐 프로젝트의 핵심 파일이다.
 - 모든 메이븐 프로젝트는 pom.xml에 의존 모듈이나 플러그인 등의 설정을 담는다.

1-2.1 의존 설정

pom.xml 파일에 의존과 플러그인의 두 가지 정보를 설정했다.

 - 의존설정

```
	<dependencies>
		<dependency><!-- 12행~16행 : 프로젝트에서 5.2.12.RELEASE 버전의 spring-context 모듈을 사용한다고 설정-->
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.2.12.RELEASE</version>
		</dependency>
```

 - 메이븐은 한 개의 모듈을 아티팩트라는 단위로 관리한다.
 - 위 설정은 spring-context 라는 식별자를 가진 5.2.12 버전의 아티팩트에 대한 의존(dependency)을 추가한다는 것이다.
 - 여기서 의존을 추가한다는 것은 일반적인 자바 어플리케이션에서 클래스 패스에 spring-context 모듈을 추가한다는 것을 뜻한다.
 - 각 아티팩트의 완전한 이름은 "아티팩트이름 - 버젼.jar"이므로, 위 설정은 메이븐 프로젝트의 소스 코드를 컴파일하고 실행할 때 사용할 클래스 패스에 spring-context-5.1.12.RELEASE.jar 파일을 추가한다는 것을 의미한다.
 - spring-context 란, Bean의 확장 버전으로 Spring이 Bean을 다루기 좀 더 쉽도록 기능들이 추가된 공간이다. 단순히 Bean을 다루는 것 이외에도 추가적인 기능을 수행합니다.(자세한 설명은 검색해보자)

1-2.2 메이븐 리포지토리

 - 위 처럼 작업을 하였지만 spring-context-5.1.12.RELEASE.jar 파일은 찾아 볼 수 없다. 이제 추가하는 작업을 시작한다.
 - 메이븐은 코드를 컴파일 하거나 실행할 때 <dependency>로 실행한 아티팩트 파일을 사용한다. 아티팩트 파일은 다음 과정을 거쳐 구한다.

  1) 메이븐 로컬 리포지토리(사용자홈폴더\m2\repository)에서  "아티팩트이름 - 버젼.jar"가 있는지 검사, 사용한다.
  2) 이때, 파일이 없다면 메이븐 원격 중앙 리포지토리로부터 해당 파일을 다운로드하여 사용한다.

 - 따라서 1)의 경로에서 spring-context-5.1.12.RELEASE.jar 가 없다면 2)처럼 다운받아야 하므로 cmd를 켜고 "mvn compile"를 실행 하면 된다.

1-2.3 의존 전이

 - "mvn compile" 을 실행하면 spring-context-5.1.12.RELEASE.jar이것 외에 다양한 아티팩트를 다운한다.
 - 그중 "spring-context-5.1.12.RELEASE.pom" 의 내용을 살펴 보면

```
책을 보자 못 찾겠다.
```

 spring-context 아티팩트는 spring-aop, spring-bean, spring-core 아티팩트에 의존한다는 의미가 있다.
이렇게 의존 대상이 다시 의존하는 대상도 함께 포함되는 것을 의존 전이(Dependencies)라고 한다.

1-2.4 메이븐 기본 폴더 구조

- src\main\java 는 자바 소스 코드 위치
- src\main\resources 는 자바 소스 이외의 자원파일 위치
- src\main\webapp 는 jsp코드, WEB-INF\web.xml 파일 등 위치

1-2.5 메이븐 프로젝트 임포트

책 본문 참고

1-3 그레이들 프로젝트 생성

책 본문 참고

1-4 예제 코드 작성

작성 내용
 - Greeter.java : 콘솔에 간단한 메시지를 출력하는 자바 클래스
 - AppContext.java : 스프링 설정 파일
 - main. java : main() 메서드를 통해 스프링과 Greeter를 실행하는 자바 클래스


